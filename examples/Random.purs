module Example.Random where
import Prelude hiding (div)
import Data.Int (toNumber)
import Data.Array ((..), mapWithIndex)
import Data.Array.NonEmpty (NonEmptyArray, cons')
import Effect (Effect)
import Pha (text, class', style, (/\))
import Pha.App (Document, app, attachTo)
import Pha.Update (Update)
import Pha.Random (randomInt, shuffle, sample)
import Pha.Effects.Random (RNG, randomly, interpretRng)
import Pha.Elements (div, button)
import Pha.Events (onclick)
import Pha.Util (pc)
import Run as Run

data Card = Ace | Two | Three | Four | Five | Six | Seven | Eight | Nine | Ten | Jack | Queen | King
cards âˆ· NonEmptyArray Card
cards = cons' Ace [Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King]

type State = {
    dice âˆ· Int,
    puzzle âˆ· Array Int,
    card âˆ· Card
}

data Msg = RollDice | DrawCard | ShufflePuzzle

-- effects used in this app
type EFFS = (rng âˆ· RNG)

-- initial state
state âˆ· State
state = {
    dice: 1,
    puzzle: 0 .. 15,
    card: Ace
}

update âˆ· Msg â†’ Update State EFFS

update RollDice = randomly \st â†’ st{dice = _} <$> randomInt 1 6
update DrawCard = randomly \st â†’  st{card = _} <$> sample cards
update ShufflePuzzle = randomly \st â†’ st{puzzle = _} <$> shuffle st.puzzle

viewCard âˆ· Card â†’ String
viewCard Ace   = "ðŸ‚¡"
viewCard Two   = "ðŸ‚¢"
viewCard Three = "ðŸ‚£"
viewCard Four  = "ðŸ‚¤"
viewCard Five  = "ðŸ‚¥"
viewCard Six   = "ðŸ‚¦"
viewCard Seven = "ðŸ‚§"
viewCard Eight = "ðŸ‚¨"
viewCard Nine  = "ðŸ‚©"
viewCard Ten   = "ðŸ‚ª"
viewCard Jack  = "ðŸ‚«"
viewCard Queen = "ðŸ‚­"
viewCard King  = "ðŸ‚®"

view âˆ· State â†’ Document Msg
view {dice, puzzle, card} = {
    title: "Randomness example",
    body:
        div [] [
            div [class' "counter" true] [text $ show dice],
            button [onclick RollDice] [text "Roll dice"],

            div [style "font-size" "12em" ] [ text $ viewCard card ],
            button [onclick DrawCard] [ text "Draw" ],

            div [class' "puzzle" true] (
                puzzle # mapWithIndex \i j â†’
                    div [
                        class' "puzzle-item" true,
                        style "left" $ pc (0.25 * toNumber (j / 4)),
                        style "top" $ pc (0.25 * toNumber (j `mod` 4)) 
                    ] [text $ show i]
            ),
            button [onclick ShufflePuzzle] [text "Shuffle"]
        ]
}

main âˆ· Effect Unit
main = app {
    init: state /\ update RollDice,
    view,
    update,
    subscriptions: const [],
    interpreter: Run.match {
        rng: interpretRng
    }
} # attachTo "root"
