// Generated by purs bundle 0.13.8
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                    
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];               
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var even = function (x) {
      return (x & 1) === 0;
  };
  exports["even"] = even;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();                                                   
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["functorMaybe"] = functorMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
})(PS);
(function(exports) {
  const LAZY_NODE = 2
  const TEXT_NODE = 3

  const compose = (f, g) => f && g ? x => f(g(x)) : f || g; 

  const h = name => ps => children => {
      const style = {};
      const props = {style};
      const vdom = { name, children: children.filter(x => x), props, node: null };
      const n = ps.length;
      for (let i = 0; i < n; i++) {
          const [t, k, v] = ps[i];
          if (t === 0)
              vdom.key = k;
          else if (t == 1)
              props[k] = v;
          else if (t === 2)
              props.class = (props.class ? props.class + " " : "") + k;
          else if (t === 3)
              style[k] = v;
      }
      return vdom;
  }

  const createTextVNode = text => ({
      name: text,
      props: {},
      children: [],
      type: 3
  })                                
  exports.class_ = cls => [2, cls]
  exports.noProp = [-1]
  exports.unsafeOnWithEffect = k => v => [1, k, v]
  exports.h = h
  exports.text = createTextVNode
})(PS["Pha"] = PS["Pha"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Pha"] = $PS["Pha"] || {};
  var exports = $PS["Pha"];
  var $foreign = $PS["Pha"];
  var class$prime = function (c) {
      return function (b) {
          if (b) {
              return $foreign.class_(c);
          };
          return $foreign.noProp;
      };
  };
  exports["class'"] = class$prime;
  exports["h"] = $foreign.h;
  exports["text"] = $foreign.text;
  exports["class_"] = $foreign.class_;
  exports["unsafeOnWithEffect"] = $foreign.unsafeOnWithEffect;
})(PS);
(function(exports) {
  // code comes from hyperapp by Jorge Bucaran
  // https://github.com/jorgebucaran/hyperapp
  // modified by Guillaume Bagan

  const RECYCLED_NODE = 1
  const TEXT_NODE = 3
  const EMPTY_OBJ = {}
  const EMPTY_ARR = []
  const map = EMPTY_ARR.map
  const defer = requestAnimationFrame || setTimeout

  const merge = (a, b) => Object.assign({}, a, b);
  const compose = (f, g) => f && g ? x => f(g(x)) : f || g;

  const patchProperty = (node, key, oldValue, newValue, listener, isSvg, mapf) => {
      if (key === "key") {
      }
      else if (key === "style") {
          for (let k in merge(oldValue, newValue)) {
              oldValue = newValue == null || newValue[k] == null ? "" : newValue[k]
              if (k[0] === "-") {
                  node[key].setProperty(k, oldValue)
              } else {
                  node[key][k] = oldValue
              }
          }
      } else if (typeof newValue === "function") {
          if (
              !((node.actions || (node.actions = {}))[key] = mapf ? mapf(newValue) : newValue)
          ) {
              node.removeEventListener(key, listener)
          } else if (!oldValue) {
              node.addEventListener(key, listener)
          }
      } else if (!isSvg && key !== "list" && key in node) {
          node[key] = newValue
      } else if (newValue == null || newValue === false || (key === "class" && !newValue)) {
          node.removeAttribute(key)
      } else {
          node.setAttribute(key, newValue)
      }
  }

  const createNode = (vnode, listener, isSvg, mapf) => {
      const node =
          vnode.type === TEXT_NODE
              ? document.createTextNode(vnode.name)
              : (isSvg = isSvg || vnode.name === "svg")
                  ? document.createElementNS("http://www.w3.org/2000/svg", vnode.name)
                  : document.createElement(vnode.name)
      const props = vnode.props
      mapf = compose(mapf, vnode.mapf);

      for (let k in props) {
          patchProperty(node, k, null, props[k], listener, isSvg, mapf)
      }

      for (let i = 0, len = vnode.children.length; i < len; i++) {
          node.appendChild(
              createNode(
                  (vnode.children[i] = getVNode(vnode.children[i])),
                  listener,
                  isSvg,
                  mapf
              )
          )
      }

      return (vnode.node = node)
  }

  const getKey = vnode => vnode == null ? null : vnode.key;

  const patch = function (parent, node, oldVNode, newVNode, listener, isSvg, mapf) {
      if (oldVNode === newVNode) {
      } else if (
          oldVNode != null &&
          oldVNode.type === TEXT_NODE &&
          newVNode.type === TEXT_NODE
      ) {
          if (oldVNode.name !== newVNode.name)
              node.nodeValue = newVNode.name
      } else if (oldVNode == null || oldVNode.name !== newVNode.name) {
          node = parent.insertBefore(
              createNode((newVNode = getVNode(newVNode)), listener, isSvg, mapf),
              node
          )
          if (oldVNode != null) {
              parent.removeChild(oldVNode.node)
          }
      } else {
          let tmpVKid
          let oldVKid

          let oldKey
          let newKey

          const oldVProps = oldVNode.props
          const newVProps = newVNode.props

          const oldVKids = oldVNode.children
          const newVKids = newVNode.children

          let oldHead = 0
          let newHead = 0
          let oldTail = oldVKids.length - 1
          let newTail = newVKids.length - 1

          mapf = compose(mapf, newVNode.mapf);
          isSvg = isSvg || newVNode.name === "svg"

          for (let i in merge(oldVProps, newVProps)) {
              if (
                  (i === "value" || i === "selected" || i === "checked"
                      ? node[i]
                      : oldVProps[i]) !== newVProps[i]
              ) {
                  patchProperty(node, i, oldVProps[i], newVProps[i], listener, isSvg, mapf)
              }
          }

          while (newHead <= newTail && oldHead <= oldTail) {
              if (
                  (oldKey = getKey(oldVKids[oldHead])) == null ||
                  oldKey !== getKey(newVKids[newHead])
              ) {
                  break
              }

              patch(
                  node,
                  oldVKids[oldHead].node,
                  oldVKids[oldHead],
                  (newVKids[newHead] = getVNode(
                      newVKids[newHead++],
                      oldVKids[oldHead++]
                  )),
                  listener,
                  isSvg,
                  mapf
              )
          }

          while (newHead <= newTail && oldHead <= oldTail) {
              if (
                  (oldKey = getKey(oldVKids[oldTail])) == null ||
                  oldKey !== getKey(newVKids[newTail])
              ) {
                  break
              }

              patch(
                  node,
                  oldVKids[oldTail].node,
                  oldVKids[oldTail],
                  (newVKids[newTail] = getVNode(
                      newVKids[newTail--],
                      oldVKids[oldTail--]
                  )),
                  listener,
                  isSvg,
                  mapf
              )
          }

          if (oldHead > oldTail) {
              while (newHead <= newTail) {
                  node.insertBefore(
                      createNode(
                          (newVKids[newHead] = getVNode(newVKids[newHead++])),
                          listener,
                          isSvg,
                          mapf
                      ),
                      (oldVKid = oldVKids[oldHead]) && oldVKid.node
                  )
              }
          } else if (newHead > newTail) {
              while (oldHead <= oldTail) {
                  node.removeChild(oldVKids[oldHead++].node)
              }
          } else {
              const keyed = {}
              const newKeyed = {}
              for (let i = oldHead; i <= oldTail; i++) {
                  if ((oldKey = oldVKids[i].key) != null) {
                      keyed[oldKey] = oldVKids[i]
                  }
              }

              while (newHead <= newTail) {
                  oldKey = getKey((oldVKid = oldVKids[oldHead]))
                  newKey = getKey(
                      (newVKids[newHead] = getVNode(newVKids[newHead], oldVKid))
                  )

                  if (
                      newKeyed[oldKey] ||
                      (newKey != null && newKey === getKey(oldVKids[oldHead + 1]))
                  ) {
                      if (oldKey == null) {
                          node.removeChild(oldVKid.node)
                      }
                      oldHead++
                      continue
                  }

                  if (newKey == null) {
                      if (oldKey == null) {
                          patch(
                              node,
                              oldVKid && oldVKid.node,
                              oldVKid,
                              newVKids[newHead],
                              listener,
                              isSvg,
                              mapf
                          )
                          newHead++
                      }
                      oldHead++
                  } else {
                      if (oldKey === newKey) {
                          patch(
                              node,
                              oldVKid.node,
                              oldVKid,
                              newVKids[newHead],
                              listener,
                              isSvg,
                              mapf
                          )
                          newKeyed[newKey] = true
                          oldHead++
                      } else {
                          if ((tmpVKid = keyed[newKey]) != null) {
                              patch(
                                  node,
                                  node.insertBefore(tmpVKid.node, oldVKid && oldVKid.node),
                                  tmpVKid,
                                  newVKids[newHead],
                                  listener,
                                  isSvg,
                                  mapf
                              )
                              newKeyed[newKey] = true
                          } else {
                              patch(
                                  node,
                                  oldVKid && oldVKid.node,
                                  null,
                                  newVKids[newHead],
                                  listener,
                                  isSvg,
                                  mapf
                              )
                          }
                      }
                      newHead++
                  }
              }

              while (oldHead <= oldTail) {
                  if (getKey((oldVKid = oldVKids[oldHead++])) == null) {
                      node.removeChild(oldVKid.node)
                  }
              }

              for (let i in keyed) {
                  if (newKeyed[i] == null) {
                      node.removeChild(keyed[i].node)
                  }
              }
          }
      }

      return (newVNode.node = node)
  }

  const propsChanged = function (a, b) {
      for (let k in a) if (a[k] !== b[k]) return true
      for (let k in b) if (a[k] !== b[k]) return true
  }

  const getVNode = (newVNode, oldVNode) =>
      typeof newVNode.type === "function"
          ? ((!oldVNode || oldVNode.memo == null || propsChanged(oldVNode.memo, newVNode.memo)) &&
              ((oldVNode = newVNode.type(newVNode.memo)).memo = newVNode.memo),
              oldVNode)
          : newVNode

  const createVNode = (name, props, children, node, key, type) =>
      ({ name, props, children, node, type, key })

  const recycleNode = node =>
      node.nodeType === TEXT_NODE
          ? createTextVNode(node.nodeValue, node)
          : createVNode(
              node.nodeName.toLowerCase(),
              EMPTY_OBJ,
              map.call(node.childNodes, recycleNode),
              node,
              null,
              RECYCLED_NODE
          )

  const patchSubs = (oldSubs, newSubs, dispatch) => {
      const subs = []
      for (let
              i = 0;
          i < oldSubs.length || i < newSubs.length;
          i++
      ) {
          const oldSub = oldSubs[i]
          const newSub = newSubs[i]
          subs.push(
              newSub
                  ? !oldSub || newSub[0] !== oldSub[0] || newSub[1] !== oldSub[1]
                      ? [newSub[0], newSub[1], newSub[0](dispatch)(newSub[1])(), oldSub && oldSub[2]()]
                      : oldSub
                  : oldSub && oldSub[2]()
          )
      }
      return subs
  }

  const app = props => {
      let state = null
      let lock = false
      let subs = []

      const listener = e => dispatchEvent(e)(e.currentTarget.actions[e.type])()

      const getState = () => state

      const setState = newState => () => {
          if (state !== newState) {
              state = newState
              subs = patchSubs(subs, subscriptions(state), dispatch)
              if (!lock) {
                  lock = true
                  defer(() => render(state)());
              }
          }
      }

      let node = null;
      let vdom = null;

      const renderVDom = newVdom => () => {
          lock = false
          node = patch(
              node.parentNode,
              node,
              vdom,
              vdom = newVdom,
              listener
          )
      }

      const { render, subscriptions, dispatch, dispatchEvent, init } = props({ getS: getState, setS: setState, renderVDom })

      return rootnode => () => {
          node = document.getElementById(rootnode)
          if (!node)
              return
          vdom = node && recycleNode(node)
          init()
      }
  }

  exports.app = app
})(PS["Pha.App.Internal"] = PS["Pha.App.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Pha.App.Internal"] = $PS["Pha.App.Internal"] || {};
  var exports = $PS["Pha.App.Internal"];
  var $foreign = $PS["Pha.App.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];                
  var getDispatchers = function (getS) {
      return function (setS) {
          return function (update) {
              var modify = function (fn) {
                  return function __do() {
                      var $2 = getS();
                      return setS(fn($2))();
                  };
              };
              var dispatch = update({
                  get: getS,
                  modify: modify
              });
              var dispatchEvent = function (ev) {
                  return function (handler) {
                      return function __do() {
                          var msg = handler(ev)();
                          if (msg instanceof Data_Maybe.Nothing) {
                              return Data_Unit.unit;
                          };
                          if (msg instanceof Data_Maybe.Just) {
                              return dispatch(msg.value0)();
                          };
                          throw new Error("Failed pattern match at Pha.App.Internal (line 38, column 13 - line 40, column 36): " + [ msg.constructor.name ]);
                      };
                  };
              };
              return {
                  dispatch: dispatch,
                  dispatchEvent: dispatchEvent
              };
          };
      };
  };
  exports["getDispatchers"] = getDispatchers;
  exports["app"] = $foreign.app;
})(PS);
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports.setTitle = function (title) {
    return function (doc) {
      return function () {
        doc.title = title;
        return {};
      };
    };
  };
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var $foreign = $PS["Web.HTML.HTMLDocument"];
  exports["setTitle"] = $foreign.setTitle;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toEventTarget"] = toEventTarget;
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Pha.App"] = $PS["Pha.App"] || {};
  var exports = $PS["Pha.App"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Pha_App_Internal = $PS["Pha.App.Internal"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var attachTo = Data_Function.flip(Pha_App_Internal.app);
  var app = function (v) {
      return function (v1) {
          var v2 = Pha_App_Internal.getDispatchers(v1.getS)(v1.setS)(v.update);
          var render = function (state) {
              var v3 = v.view(state);
              return function __do() {
                  Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))(Web_HTML_HTMLDocument.setTitle(v3.title))();
                  return v1.renderVDom(v3.body)();
              };
          };
          var init2 = function __do() {
              v1.setS(v.init.state)();
              if (v.init.action instanceof Data_Maybe.Just) {
                  return v2.dispatch(v.init.action.value0)();
              };
              if (v.init.action instanceof Data_Maybe.Nothing) {
                  return Data_Unit.unit;
              };
              throw new Error("Failed pattern match at Pha.App (line 29, column 9 - line 31, column 32): " + [ v.init.action.constructor.name ]);
          };
          return {
              render: render,
              init: init2,
              subscriptions: v.subscriptions,
              dispatch: v2.dispatch,
              dispatchEvent: v2.dispatchEvent
          };
      };
  };
  exports["app"] = app;
  exports["attachTo"] = attachTo;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Pha.Elements"] = $PS["Pha.Elements"] || {};
  var exports = $PS["Pha.Elements"];
  var Pha = $PS["Pha"];  
  var span = Pha.h("span");    
  var div = Pha.h("div");
  var button = Pha.h("button");
  exports["button"] = button;
  exports["div"] = div;
  exports["span"] = span;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Pha.Events"] = $PS["Pha.Events"] || {};
  var exports = $PS["Pha.Events"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Pha = $PS["Pha"];
  var on = Pha.unsafeOnWithEffect;
  var always = function (msg) {
      return function (v) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(msg));
      };
  };
  var onclick = (function () {
      var $44 = on("click");
      return function ($45) {
          return $44(always($45));
      };
  })();
  exports["onclick"] = onclick;
})(PS);
(function(exports) {
  exports.makeSub = fn => d => [fn, d]
})(PS["Pha.Subs"] = PS["Pha.Subs"] || {});
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };

  exports.removeEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.removeEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
})(PS);
(function(exports) {
  "use strict";

  exports.key = function (e) {
    return e.key;
  };
})(PS["Web.UIEvent.KeyboardEvent"] = PS["Web.UIEvent.KeyboardEvent"] || {});
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
      return nothing;
    } 
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.UIEvent.KeyboardEvent"] = $PS["Web.UIEvent.KeyboardEvent"] || {};
  var exports = $PS["Web.UIEvent.KeyboardEvent"];
  var $foreign = $PS["Web.UIEvent.KeyboardEvent"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                           
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("KeyboardEvent");
  exports["fromEvent"] = fromEvent;
  exports["key"] = $foreign.key;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Pha.Subs"] = $PS["Pha.Subs"] || {};
  var exports = $PS["Pha.Subs"];
  var $foreign = $PS["Pha.Subs"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var Web_UIEvent_KeyboardEvent = $PS["Web.UIEvent.KeyboardEvent"];                
  var on = function (name) {
      var handleEvent = function (dispatch) {
          return function (decoder) {
              return function (ev) {
                  return function __do() {
                      var v = decoder(ev)();
                      if (v instanceof Data_Maybe.Nothing) {
                          return Data_Unit.unit;
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return dispatch(v.value0)();
                      };
                      throw new Error("Failed pattern match at Pha.Subs (line 27, column 24 - line 29, column 36): " + [ v.constructor.name ]);
                  };
              };
          };
      };
      var fn = function (dispatch) {
          return function (decoder) {
              return function __do() {
                  var listener = Web_Event_EventTarget.eventListener(handleEvent(dispatch)(decoder))();
                  Control_Bind.bind(Effect.bindEffect)(Data_Functor.mapFlipped(Effect.functorEffect)(Web_HTML.window)(Web_HTML_Window.toEventTarget))(Web_Event_EventTarget.addEventListener(name)(listener)(false))();
                  return Control_Bind.bind(Effect.bindEffect)(Data_Functor.mapFlipped(Effect.functorEffect)(Web_HTML.window)(Web_HTML_Window.toEventTarget))(Web_Event_EventTarget.removeEventListener(name)(listener)(false));
              };
          };
      };
      return $foreign.makeSub(fn);
  };
  var onKeyDown = function (f) {
      return on("keydown")(function (ev) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(f)(Data_Functor.map(Data_Maybe.functorMaybe)(Web_UIEvent_KeyboardEvent.key)(Web_UIEvent_KeyboardEvent.fromEvent(ev))));
      });
  };
  exports["onKeyDown"] = onKeyDown;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Example.Counter2"] = $PS["Example.Counter2"] || {};
  var exports = $PS["Example.Counter2"];
  var Data_Function = $PS["Data.Function"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Pha = $PS["Pha"];
  var Pha_App = $PS["Pha.App"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Subs = $PS["Pha.Subs"];                
  var Increment = (function () {
      function Increment() {

      };
      Increment.value = new Increment();
      return Increment;
  })();
  var DelayedIncrement = (function () {
      function DelayedIncrement() {

      };
      DelayedIncrement.value = new DelayedIncrement();
      return DelayedIncrement;
  })();
  var view = function (v) {
      return {
          title: "Counter example",
          body: Pha_Elements.div([  ])([ Pha_Elements.div([ Pha.class_("counter") ])([ Pha.text(Data_Show.show(Data_Show.showInt)(v.counter)) ]), Pha_Elements.button([ Pha_Events.onclick(Increment.value) ])([ Pha.text("Increment") ]), Pha_Elements.button([ Pha_Events.onclick(DelayedIncrement.value) ])([ Pha.text("Delayed Increment") ]), Pha_Elements.div([  ])([ Pha_Elements.span([  ])([ Pha.text("green when the counter is even") ]), Pha_Elements.div([ Pha.class_("box"), Pha["class'"]("even")(Data_Int.even(v.counter)) ])([  ]) ]), Pha_Elements.div([  ])([ Pha.text("press space to increment the counter") ]) ])
      };
  };
  var update = function (v) {
      return function (v1) {
          if (v1 instanceof Increment) {
              return v.modify(function (v2) {
                  return {
                      counter: v2.counter + 1 | 0
                  };
              });
          };
          if (v1 instanceof DelayedIncrement) {
              return v.modify(function (v2) {
                  return {
                      counter: v2.counter + 1 | 0
                  };
              });
          };
          throw new Error("Failed pattern match at Example.Counter2 (line 26, column 1 - line 26, column 90): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var state = {
      counter: 0
  };
  var keyDownHandler = function (v) {
      if (v === " ") {
          return new Data_Maybe.Just(Increment.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var main = Pha_App.attachTo("root")(Pha_App.app({
      init: {
          state: state,
          action: Data_Maybe.Nothing.value
      },
      view: view,
      update: update,
      subscriptions: Data_Function["const"]([ Pha_Subs.onKeyDown(keyDownHandler) ])
  }));
  exports["state"] = state;
  exports["Increment"] = Increment;
  exports["DelayedIncrement"] = DelayedIncrement;
  exports["update"] = update;
  exports["view"] = view;
  exports["keyDownHandler"] = keyDownHandler;
  exports["main"] = main;
})(PS);
PS["Example.Counter2"].main();