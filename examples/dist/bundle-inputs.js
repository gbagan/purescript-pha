// Generated by purs bundle 0.13.5
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorFn"] = functorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];                          
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  exports["reverse"] = reverse;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  };                                       
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqBoolean"] = eqBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                         
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.CatQueue"] = $PS["Data.CatQueue"] || {};
  var exports = $PS["Data.CatQueue"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.CatList"] = $PS["Data.CatList"] || {};
  var exports = $PS["Data.CatList"];
  var Data_CatQueue = $PS["Data.CatQueue"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (v1) {
          if (v instanceof CatNil) {
              return v1;
          };
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $44 = Data_CatQueue["null"](v.value1);
              if ($44) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = link;
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Monad.Free"] = $PS["Control.Monad.Free"] || {};
  var exports = $PS["Control.Monad.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_CatList = $PS["Data.CatList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var resume$prime = function (k) {
      return function (j) {
          return function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return j(v.value0);
              };
              if (v instanceof Bind) {
                  return k(v.value0)(v.value1);
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [ v.constructor.name ]);
          };
      };
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)((function () {
              var $120 = Control_Applicative.pure(freeApplicative);
              return function ($121) {
                  return $120(k($121));
              };
          })())(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($122) {
      return fromView(Return.create($122));
  });
  var liftF = function (f) {
      return fromView(new Bind(f, (function () {
          var $123 = Control_Applicative.pure(freeApplicative);
          return function ($124) {
              return $123($124);
          };
      })()));
  };
  exports["liftF"] = liftF;
  exports["resume'"] = resume$prime;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeHas = function (label) {
    return function (rec) {
      return {}.hasOwnProperty.call(rec, label);
    };
  };

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeHas"] = $foreign.unsafeHas;
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Functor.Variant"] = $PS["Data.Functor.Variant"] || {};
  var exports = $PS["Data.Functor.Variant"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var onMatch = function (dictRowToList) {
      return function (dictVariantFMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return function (k) {
                      return function (v) {
                          if (Record_Unsafe.unsafeHas(v.type)(r)) {
                              return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                          };
                          return k(v);
                      };
                  };
              };
          };
      };
  };
  var inj = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictFunctor) {
              return function (p) {
                  return function (value) {
                      return {
                          type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                          value: value,
                          map: Data_Functor.map(dictFunctor)
                      };
                  };
              };
          };
      };
  };
  var functorVariantF = new Data_Functor.Functor(function (f) {
      return function (a) {
          return {
              type: a.type,
              value: a.map(f)(a.value),
              map: a.map
          };
      };
  });
  var case_ = function (r) {
      return Partial_Unsafe.unsafeCrashWith("Data.Functor.Variant: pattern match failure [" + (r.type + "]"));
  }; 
  var match = function (dictRowToList) {
      return function (dictVariantFMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return onMatch()()()(r)(case_);
              };
          };
      };
  };
  exports["inj"] = inj;
  exports["onMatch"] = onMatch;
  exports["match"] = match;
  exports["functorVariantF"] = functorVariantF;
})(PS);
(function(exports) {
  "use strict";

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  exports["fromString"] = fromString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];                                   
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["unwrap"] = unwrap;
  exports["Newtype"] = Newtype;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
})(PS);
(function(exports) {
  // code comes from hyperapp by Jorge Bucaran
  // https://github.com/jorgebucaran/hyperapp

  const RECYCLED_NODE = 1
  const LAZY_NODE = 2
  const TEXT_NODE = 3
  const EMPTY_OBJ = {}
  const EMPTY_ARR = []
  const map = EMPTY_ARR.map
  const defer = requestAnimationFrame || setTimeout

  const merge = function(a, b) {
    var out = {}

    for (var k in a) out[k] = a[k]
    for (var k in b) out[k] = b[k]

    return out
  }

  const patchProperty = function(node, key, oldValue, newValue, listener, isSvg, decorator) {
    if (key === "key") {
    } else if (key === "style") {
      for (var k in merge(oldValue, newValue)) {
        oldValue = newValue == null || newValue[k] == null ? "" : newValue[k]
        if (k[0] === "-") {
          node[key].setProperty(k, oldValue)
        } else {
          node[key][k] = oldValue
        }
      }
    } else if (key[0] === "o" && key[1] === "n") {
      if (
        !((node.actions || (node.actions = {}))[
          (key = key.slice(2).toLowerCase())
        ] = decorator ? (ev => decorator(newValue(ev))) : newValue)
      ) {
        node.removeEventListener(key, listener)
      } else if (!oldValue) {
        node.addEventListener(key, listener)
      }
    } else if (!isSvg && key !== "list" && key in node) {
      node[key] = newValue == null ? "" : newValue
    } else if (
      newValue == null ||
      newValue === false ||
      (key === "class" && !newValue)
    ) {
      node.removeAttribute(key)
    } else {
      node.setAttribute(key, newValue)
    }
  }

  const createNode = function(vnode, listener, isSvg, decorator) {
    var node =
      vnode.type === TEXT_NODE
        ? document.createTextNode(vnode.name)
        : (isSvg = isSvg || vnode.name === "svg")
        ? document.createElementNS("http://www.w3.org/2000/svg", vnode.name)
        : document.createElement(vnode.name)
    var props = vnode.props

    const dec2 = vnode.decorator;
    const decorator2 = !decorator ? dec2 : dec2 ? (x => ev => decorator(dec2(x(ev)))) : decorator; 

    for (var k in props) {
      patchProperty(node, k, null, props[k], listener, isSvg, decorator2)
    }

    for (var i = 0, len = vnode.children.length; i < len; i++) {
      node.appendChild(
        createNode(
          (vnode.children[i] = getVNode(vnode.children[i])),
          listener,
          isSvg,
          decorator2
        )
      )
    }

    return (vnode.node = node)
  }

  const getKey = vnode => vnode == null ? null : vnode.key;

  const patch = function(parent, node, oldVNode, newVNode, listener, isSvg, decorator) {
     //decorator = newVNode.decorator || decorator;

    if (oldVNode === newVNode) {
    } else if (
      oldVNode != null &&
      oldVNode.type === TEXT_NODE &&
      newVNode.type === TEXT_NODE
    ) {
      if (oldVNode.name !== newVNode.name) node.nodeValue = newVNode.name
    } else if (oldVNode == null || oldVNode.name !== newVNode.name) {
      node = parent.insertBefore(
        createNode((newVNode = getVNode(newVNode)), listener, isSvg, decorator),
        node
      )
      if (oldVNode != null) {
        parent.removeChild(oldVNode.node)
      }
    } else {
      var tmpVKid
      var oldVKid

      var oldKey
      var newKey

      var oldVProps = oldVNode.props
      var newVProps = newVNode.props

      var oldVKids = oldVNode.children
      var newVKids = newVNode.children

      var oldHead = 0
      var newHead = 0
      var oldTail = oldVKids.length - 1
      var newTail = newVKids.length - 1

      const dec2 = newVNode.decorator;
      const decorator2 = !decorator ?
                     dec2 
                  : dec2 ? 
                          (x => ev => decorator(dec(x(ev))))
                   : decorator;

      isSvg = isSvg || newVNode.name === "svg"

      for (var i in merge(oldVProps, newVProps)) {
        if (
          (i === "value" || i === "selected" || i === "checked"
            ? node[i]
            : oldVProps[i]) !== newVProps[i]
        ) {
          patchProperty(node, i, oldVProps[i], newVProps[i], listener, isSvg, decorator2)
        }
      }

      while (newHead <= newTail && oldHead <= oldTail) {
        if (
          (oldKey = getKey(oldVKids[oldHead])) == null ||
          oldKey !== getKey(newVKids[newHead])
        ) {
          break
        }

        patch(
          node,
          oldVKids[oldHead].node,
          oldVKids[oldHead],
          (newVKids[newHead] = getVNode(
            newVKids[newHead++],
            oldVKids[oldHead++]
          )),
          listener,
          isSvg,
          decorator2
        )
      }

      while (newHead <= newTail && oldHead <= oldTail) {
        if (
          (oldKey = getKey(oldVKids[oldTail])) == null ||
          oldKey !== getKey(newVKids[newTail])
        ) {
          break
        }

        patch(
          node,
          oldVKids[oldTail].node,
          oldVKids[oldTail],
          (newVKids[newTail] = getVNode(
            newVKids[newTail--],
            oldVKids[oldTail--]
          )),
          listener,
          isSvg,
          decorator2
        )
      }

      if (oldHead > oldTail) {
        while (newHead <= newTail) {
          node.insertBefore(
            createNode(
              (newVKids[newHead] = getVNode(newVKids[newHead++])),
              listener,
              isSvg,
              decorator2
            ),
            (oldVKid = oldVKids[oldHead]) && oldVKid.node
          )
        }
      } else if (newHead > newTail) {
        while (oldHead <= oldTail) {
          node.removeChild(oldVKids[oldHead++].node)
        }
      } else {
        for (var i = oldHead, keyed = {}, newKeyed = {}; i <= oldTail; i++) {
          if ((oldKey = oldVKids[i].key) != null) {
            keyed[oldKey] = oldVKids[i]
          }
        }

        while (newHead <= newTail) {
          oldKey = getKey((oldVKid = oldVKids[oldHead]))
          newKey = getKey(
            (newVKids[newHead] = getVNode(newVKids[newHead], oldVKid))
          )

          if (
            newKeyed[oldKey] ||
            (newKey != null && newKey === getKey(oldVKids[oldHead + 1]))
          ) {
            if (oldKey == null) {
              node.removeChild(oldVKid.node)
            }
            oldHead++
            continue
          }

          if (newKey == null || oldVNode.type === RECYCLED_NODE) {
            if (oldKey == null) {
              patch(
                node,
                oldVKid && oldVKid.node,
                oldVKid,
                newVKids[newHead],
                listener,
                isSvg,
                decorator2
              )
              newHead++
            }
            oldHead++
          } else {
            if (oldKey === newKey) {
              patch(
                node,
                oldVKid.node,
                oldVKid,
                newVKids[newHead],
                listener,
                isSvg,
                decorator2
              )
              newKeyed[newKey] = true
              oldHead++
            } else {
              if ((tmpVKid = keyed[newKey]) != null) {
                patch(
                  node,
                  node.insertBefore(tmpVKid.node, oldVKid && oldVKid.node),
                  tmpVKid,
                  newVKids[newHead],
                  listener,
                  isSvg,
                  decorator2
                )
                newKeyed[newKey] = true
              } else {
                patch(
                  node,
                  oldVKid && oldVKid.node,
                  null,
                  newVKids[newHead],
                  listener,
                  isSvg,
                  decorator2
                )
              }
            }
            newHead++
          }
        }

        while (oldHead <= oldTail) {
          if (getKey((oldVKid = oldVKids[oldHead++])) == null) {
            node.removeChild(oldVKid.node)
          }
        }

        for (var i in keyed) {
          if (newKeyed[i] == null) {
            node.removeChild(keyed[i].node)
          }
        }
      }
    }

    return (newVNode.node = node)
  }

  const propsChanged = function(a, b) {
    for (var k in a) if (a[k] !== b[k]) return true
    for (var k in b) if (a[k] !== b[k]) return true
  }

  const getVNode = function(newVNode, oldVNode) {
    return newVNode.type === LAZY_NODE
      ? ((!oldVNode || propsChanged(oldVNode.lazy, newVNode.lazy)) &&
          ((oldVNode = newVNode.lazy.view(newVNode.lazy)).lazy = newVNode.lazy),
        oldVNode)
      : newVNode
  }

  const createVNode = function(name, props, children, node, key, type) {
    return {
      name: name,
      props: props,
      children: children,
      node: node,
      type: type,
      key: key
    }
  }

  const createTextVNode = (value, node) =>
      createVNode(value, EMPTY_OBJ, EMPTY_ARR, node, null, TEXT_NODE);

  const recycleNode = node =>
    node.nodeType === TEXT_NODE
      ? createTextVNode(node.nodeValue, node)
      : createVNode(
          node.nodeName.toLowerCase(),
          EMPTY_OBJ,
          map.call(node.childNodes, recycleNode),
          node,
          null,
          RECYCLED_NODE
        )

  const appAux = disp => props => () => {
    const {view, events, effects, init} = props
    let state = {};
    let lock = false
    let node = document.getElementById(props.node);
    let vdom = node && recycleNode(node);

    const listener = function(event) {
      dispatch(event, this.actions[event.type]);
    }
 
    const setState = newState => {
      if (state !== newState) {
        state = newState;
        if (!lock) defer(render, (lock = true))
      }

      return state
    }

    const dispatch = (event, action) => disp
                                          (() => state)
                                          (fn => () => setState(fn(state)))
                                          (effects)
                                          (action(event))();

    const rawEvent = (name, action) => {
       const listener = event => dispatch(event, action);
       addEventListener (name, listener);
     }


    const render = () => {
      lock = false
      node = patch(
        node.parentNode,
        node,
        vdom,
        vdom = view(state),
        listener
      )
    }
    setState(props.state);
    for (let i = 0; i < events.length; i++) {
       rawEvent(events[i].value0, events[i].value1);
    }
    dispatch(undefined, () => init);
  }

  const h = isStyle => name => ps => children => {
      const style = {};
      const props = {style};
      const vdom = { name, children: children.filter(x => x), props, node: null };
      const n = ps.length;
      for (let i = 0; i < n; i++) {
          const obj = ps[i];
          const value0 = obj.value0;
          const value1 = obj.value1;
          if (value1 === undefined)
              vdom.key = value0;
          else if (typeof value1 === 'function')
              vdom.props["on"+value0] = value1;
          else if (typeof value1 === 'boolean') {
              if(!value1)
                  {}
              else if (props.class)  
                  props.class += ' ' + value0;
              else
                  props.class = value0;
          }
          else if (isStyle(obj))
              style[value0] = value1;
          else
              props[value0] = value1;
      }
      return vdom;
  }

  const lazy = st => view => ({
      type: LAZY_NODE,
      lazy: {
          view: (x => view(x.state)),
          state: st
      }
  });                      
  exports.appAux = appAux;
  exports.hAux = h;
  exports.text = createTextVNode;
})(PS["Pha"] = PS["Pha"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Run"] = $PS["Run"] || {};
  var exports = $PS["Run"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Variant = $PS["Data.Functor.Variant"];
  var Data_Newtype = $PS["Data.Newtype"];                  
  var Run = function (x) {
      return x;
  };
  var newtypeRun = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Run);
  var resume = function (k1) {
      return function (k2) {
          var $45 = Control_Monad_Free["resume'"](function (x) {
              return function (f) {
                  return k1(Data_Functor.map(Data_Functor_Variant.functorVariantF)(function ($48) {
                      return Run(f($48));
                  })(x));
              };
          })(k2);
          var $46 = Data_Newtype.unwrap(newtypeRun);
          return function ($47) {
              return $45($46($47));
          };
      };
  };
  var runCont = function (k1) {
      return function (k2) {
          var loop = resume(function (b) {
              return k1(Data_Functor.map(Data_Functor_Variant.functorVariantF)(loop)(b));
          })(k2);
          return loop;
      };
  };                                          
  var lift = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictFunctor) {
              return function (p) {
                  var $54 = Data_Functor_Variant.inj()(dictIsSymbol)(dictFunctor)(p);
                  return function ($55) {
                      return Run(Control_Monad_Free.liftF($54($55)));
                  };
              };
          };
      };
  };
  var bindRun = Control_Monad_Free.freeBind;  
  var applicativeRun = Control_Monad_Free.freeApplicative;
  exports["lift"] = lift;
  exports["runCont"] = runCont;
  exports["applicativeRun"] = applicativeRun;
  exports["bindRun"] = bindRun;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha"] = $PS["Pha"] || {};
  var exports = $PS["Pha"];
  var $foreign = $PS["Pha"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor_Variant = $PS["Data.Functor.Variant"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Run = $PS["Run"];
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Style = (function () {
      function Style(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Style.create = function (value0) {
          return function (value1) {
              return new Style(value0, value1);
          };
      };
      return Style;
  })();
  var On = (function () {
      function On(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      On.create = function (value0) {
          return function (value1) {
              return new On(value0, value1);
          };
      };
      return On;
  })();
  var on = On.create;  
  var isStyle = function (v) {
      if (v instanceof Style) {
          return true;
      };
      return false;
  };
  var h = $foreign.hAux(isStyle);
  var dispatch = function (getS) {
      return function (setS) {
          return function (matching) {
              var go = Data_Functor_Variant.onMatch()()()({
                  getState: function (v) {
                      return Control_Bind.bind(Effect.bindEffect)(getS)(v.value0);
                  },
                  setState: function (v) {
                      return Control_Apply.applySecond(Effect.applyEffect)(setS(v.value0))(v.value1);
                  }
              })(matching);
              return Run.runCont(go)(function (v) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              });
          };
      };
  };                             
  var attr = function (n) {
      return function (v) {
          return new Attr(n, v);
      };
  };
  var app = $foreign.appAux(dispatch);
  exports["h"] = h;
  exports["attr"] = attr;
  exports["on"] = on;
  exports["app"] = app;
  exports["text"] = $foreign.text;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha.Action"] = $PS["Pha.Action"] || {};
  var exports = $PS["Pha.Action"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Run = $PS["Run"];                
  var SetState = (function () {
      function SetState(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetState.create = function (value0) {
          return function (value1) {
              return new SetState(value0, value1);
          };
      };
      return SetState;
  })();
  var functorSetState = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new SetState(m.value0, f(m.value1));
      };
  });
  var setState = function (fn) {
      return Run.lift()(new Data_Symbol.IsSymbol(function () {
          return "setState";
      }))(functorSetState)(Data_Symbol.SProxy.value)(new SetState(fn, Data_Unit.unit));
  };
  exports["setState"] = setState;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha.Attributes"] = $PS["Pha.Attributes"] || {};
  var exports = $PS["Pha.Attributes"];
  var Pha = $PS["Pha"];                
  var value = Pha.attr("value");
  var onchange$prime = Pha.on("change");
  var checked = function (b) {
      return Pha.attr("checked")((function () {
          if (b) {
              return "true";
          };
          return "";
      })());
  };
  exports["checked"] = checked;
  exports["value"] = value;
  exports["onchange'"] = onchange$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha.Elements"] = $PS["Pha.Elements"] || {};
  var exports = $PS["Pha.Elements"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Pha = $PS["Pha"];
  var input = function (t) {
      return function (props) {
          return Pha.h("input")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.attr("type")(t) ])(props))([  ]);
      };
  };                           
  var div = Pha.h("div");      
  var br = Pha.h("br")([  ])([  ]);
  exports["br"] = br;
  exports["div"] = div;
  exports["input"] = input;
})(PS);
(function(exports) {
                                       
  exports.unsafeToMaybeAux = nothing => just => x => x === null || x === undefined ? nothing :  just(x);

  exports.preventDefaultE = e => () => e && e.preventDefault && e.preventDefault();
  exports.stopPropagationE = e => () => e && e.stopPropagation && e.stopPropagation();
  //exports.targetE = e => e && e.target
  //exports.currentTargetE = e => e && e.currentTarget
  exports.unsafeTargetCheckedE = e => () => e && e.target && e.target.checked
  exports.unsafeTargetValueE = e => () => e && e.target && e.target.value
})(PS["Pha.Event"] = PS["Pha.Event"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha.Event"] = $PS["Pha.Event"] || {};
  var exports = $PS["Pha.Event"];
  var $foreign = $PS["Pha.Event"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Effect = $PS["Effect"];
  var Run = $PS["Run"];                
  var PreventDefault = (function () {
      function PreventDefault(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PreventDefault.create = function (value0) {
          return function (value1) {
              return new PreventDefault(value0, value1);
          };
      };
      return PreventDefault;
  })();
  var StopPropagation = (function () {
      function StopPropagation(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StopPropagation.create = function (value0) {
          return function (value1) {
              return new StopPropagation(value0, value1);
          };
      };
      return StopPropagation;
  })();
  var TargetChecked = (function () {
      function TargetChecked(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TargetChecked.create = function (value0) {
          return function (value1) {
              return new TargetChecked(value0, value1);
          };
      };
      return TargetChecked;
  })();
  var TargetValue = (function () {
      function TargetValue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TargetValue.create = function (value0) {
          return function (value1) {
              return new TargetValue(value0, value1);
          };
      };
      return TargetValue;
  })();
  var unsafeToMaybe = $foreign.unsafeToMaybeAux(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var interpretEvent = function (v) {
      if (v instanceof PreventDefault) {
          return Control_Apply.applySecond(Effect.applyEffect)($foreign.preventDefaultE(v.value0))(v.value1);
      };
      if (v instanceof StopPropagation) {
          return Control_Apply.applySecond(Effect.applyEffect)($foreign.stopPropagationE(v.value0))(v.value1);
      };
      if (v instanceof TargetChecked) {
          return Control_Bind.bind(Effect.bindEffect)(Data_Functor.map(Effect.functorEffect)(unsafeToMaybe)($foreign.unsafeTargetCheckedE(v.value0)))(v.value1);
      };
      if (v instanceof TargetValue) {
          return Control_Bind.bind(Effect.bindEffect)(Data_Functor.map(Effect.functorEffect)(unsafeToMaybe)($foreign.unsafeTargetValueE(v.value0)))(v.value1);
      };
      throw new Error("Failed pattern match at Pha.Event (line 50, column 1 - line 50, column 54): " + [ v.constructor.name ]);
  };
  var functorEventF = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof PreventDefault) {
              return new PreventDefault(m.value0, f(m.value1));
          };
          if (m instanceof StopPropagation) {
              return new StopPropagation(m.value0, f(m.value1));
          };
          if (m instanceof TargetChecked) {
              return new TargetChecked(m.value0, Data_Functor.map(Data_Functor.functorFn)(f)(m.value1));
          };
          if (m instanceof TargetValue) {
              return new TargetValue(m.value0, Data_Functor.map(Data_Functor.functorFn)(f)(m.value1));
          };
          throw new Error("Failed pattern match at Pha.Event (line 31, column 1 - line 31, column 48): " + [ m.constructor.name ]);
      };
  });
  var targetChecked = function (ev) {
      return Run.lift()(new Data_Symbol.IsSymbol(function () {
          return "event";
      }))(functorEventF)(Data_Symbol.SProxy.value)(new TargetChecked(ev, Control_Category.identity(Control_Category.categoryFn)));
  };
  var targetValue = function (ev) {
      return Run.lift()(new Data_Symbol.IsSymbol(function () {
          return "event";
      }))(functorEventF)(Data_Symbol.SProxy.value)(new TargetValue(ev, Control_Category.identity(Control_Category.categoryFn)));
  };
  exports["targetChecked"] = targetChecked;
  exports["targetValue"] = targetValue;
  exports["interpretEvent"] = interpretEvent;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Example.Inputs"] = $PS["Example.Inputs"] || {};
  var exports = $PS["Example.Inputs"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor_Variant = $PS["Data.Functor.Variant"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Attributes = $PS["Pha.Attributes"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Event = $PS["Pha.Event"];
  var Run = $PS["Run"];                
  var state = {
      val1: "2",
      val2: "4",
      isMul: false
  };
  var result = function (v) {
      return Data_Maybe.fromMaybe("invalid input")(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Int.fromString(v.val1))(function (v1) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Int.fromString(v.val2))(function (v2) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Show.show(Data_Show.showInt)((function () {
                  if (v.isMul) {
                      return v1 * v2 | 0;
                  };
                  return v1 + v2 | 0;
              })()));
          });
      }));
  };
  var changeval2 = function (ev) {
      return Control_Bind.bind(Run.bindRun)(Pha_Event.targetValue(ev))(function (v) {
          if (v instanceof Data_Maybe.Just) {
              return Pha_Action.setState(function (v1) {
                  return {
                      val2: v.value0,
                      isMul: v1.isMul,
                      val1: v1.val1
                  };
              });
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
          };
          throw new Error("Failed pattern match at Example.Inputs (line 42, column 36 - line 44, column 25): " + [ v.constructor.name ]);
      });
  };
  var changeval1 = function (ev) {
      return Control_Bind.bind(Run.bindRun)(Pha_Event.targetValue(ev))(function (v) {
          if (v instanceof Data_Maybe.Just) {
              return Pha_Action.setState(function (v1) {
                  return {
                      val1: v.value0,
                      isMul: v1.isMul,
                      val2: v1.val2
                  };
              });
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
          };
          throw new Error("Failed pattern match at Example.Inputs (line 37, column 36 - line 39, column 25): " + [ v.constructor.name ]);
      });
  };
  var changemul = function (ev) {
      return Control_Bind.bind(Run.bindRun)(Pha_Event.targetChecked(ev))(function (val) {
          return Pha_Action.setState(function (v) {
              return {
                  isMul: Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqBoolean))(val)(new Data_Maybe.Just(true)),
                  val1: v.val1,
                  val2: v.val2
              };
          });
      });
  };
  var view = function (v) {
      return Pha_Elements.div([  ])([ Pha_Elements.input("text")([ Pha.attr("size")("5"), Pha_Attributes["onchange'"](changeval1), Pha_Attributes.value(v.val1) ]), Pha.text(" + "), Pha_Elements.input("text")([ Pha.attr("size")("5"), Pha_Attributes["onchange'"](changeval2), Pha_Attributes.value(v.val2) ]), Pha.text(" = " + result(v)), Pha_Elements.br, Pha_Elements.input("checkbox")([ Pha_Attributes.checked(v.isMul), Pha_Attributes["onchange'"](changemul) ]), Pha.text("Multiplication instead of addition") ]);
  };
  var main = Pha.app({
      state: state,
      view: view,
      init: Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit),
      node: "root",
      events: [  ],
      effects: Data_Functor_Variant.match()()()({
          event: Pha_Event.interpretEvent
      })
  });
  exports["state"] = state;
  exports["result"] = result;
  exports["changeval1"] = changeval1;
  exports["changeval2"] = changeval2;
  exports["changemul"] = changemul;
  exports["view"] = view;
  exports["main"] = main;
})(PS);
PS["Example.Inputs"].main();