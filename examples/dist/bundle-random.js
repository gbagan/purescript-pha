// Generated by purs bundle 0.13.8
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                    
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._insertAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i > l.length) return nothing;
            var l1 = l.slice();
            l1.splice(i, 0, a);
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];              
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Maybe = $PS["Data.Maybe"];
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var insertAt = $foreign["_insertAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };
  exports["head"] = head;
  exports["index"] = index;
  exports["insertAt"] = insertAt;
  exports["mapWithIndex"] = mapWithIndex;
  exports["range"] = $foreign.range;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];         
  var unsafeFromArray = Unsafe_Coerce.unsafeCoerce;
  var toArray = Unsafe_Coerce.unsafeCoerce;
  var cons$prime = function (x) {
      return function (xs) {
          return unsafeFromArray(Data_Array.cons(x)(xs));
      };
  };
  var adaptMaybe = function (f) {
      var $64 = Data_Maybe.fromJust();
      return function ($65) {
          return $64(f(toArray($65)));
      };
  };
  var head = adaptMaybe(Data_Array.head);    
  var adaptAny = function (f) {
      return function ($67) {
          return f(toArray($67));
      };
  };
  var index = adaptAny(Data_Array.index);
  var length = adaptAny(Data_Array.length);
  var unsafeAdapt = function (f) {
      var $68 = adaptAny(f);
      return function ($69) {
          return unsafeFromArray($68($69));
      };
  };
  var cons = function (x) {
      return unsafeAdapt(Data_Array.cons(x));
  };
  exports["length"] = length;
  exports["cons'"] = cons$prime;
  exports["head"] = head;
  exports["index"] = index;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  };                                           
  var eqInt = new Eq($foreign.eqIntImpl);
  exports["eqInt"] = eqInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                                                                                 
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  exports["ordInt"] = ordInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  exports["foldl"] = foldl;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  "use strict";          

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];                                   
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                         
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Random"] = $PS["Effect.Random"] || {};
  var exports = $PS["Effect.Random"];
  var $foreign = $PS["Effect.Random"];
  var Data_Int = $PS["Data.Int"];
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var n = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * n + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  exports["randomInt"] = randomInt;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  const compose = (f, g) => f && g ? x => f(g(x)) : f || g

  const _h = (tag, ps, children, keyed=false) => {
      const style = {}
      const props = {style}
      const vdom = {tag, children, props, node: null, keyed}
      const n = ps.length
      for (let i = 0; i < n; i++) {
          const [t, k, v] = ps[i]
          if (t == 1)
              props[k] = v
          else if (t === 2)
              props.class = (props.class ? props.class + " " : "") + k
          else if (t === 3)
              style[k] = v
      }
      return vdom
  }

  const h = tag => ps => children => _h(tag, ps, children.map(v => [null, v]))
  const keyed = tag => ps => children => _h(tag, ps, children.map(v => [v.value0, v.value1]), true);


  const createTextVNode = text => ({
      tag: text,
      props: {},
      children: [],
      type: 3
  })                                
  exports.class_ = cls => [2, cls]
  exports.noProp = [-1]
  exports.unsafeOnWithEffect = k => v => [1, k, v]
  exports.style = k => v => [3, k, v]
  exports.h = h
  exports.keyed = keyed
  exports.text = createTextVNode
})(PS["Pha"] = PS["Pha"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Pha"] = $PS["Pha"] || {};
  var exports = $PS["Pha"];
  var $foreign = $PS["Pha"];
  var class$prime = function (c) {
      return function (b) {
          if (b) {
              return $foreign.class_(c);
          };
          return $foreign.noProp;
      };
  };
  exports["class'"] = class$prime;
  exports["h"] = $foreign.h;
  exports["keyed"] = $foreign.keyed;
  exports["text"] = $foreign.text;
  exports["style"] = $foreign.style;
  exports["class_"] = $foreign.class_;
  exports["unsafeOnWithEffect"] = $foreign.unsafeOnWithEffect;
})(PS);
(function(exports) {
  // code comes from hyperapp by Jorge Bucaran
  // https://github.com/jorgebucaran/hyperapp
  // modified by Guillaume Bagan

  const TEXT_NODE = 3

  const merge = (a, b) => Object.assign({}, a, b);
  const compose = (f, g) => f && g ? x => f(g(x)) : f || g;

  const patchProperty = (node, key, oldValue, newValue, listener, isSvg, mapf) => {
      if (key === "style") {
          for (let k in merge(oldValue, newValue)) {
              oldValue = newValue == null || newValue[k] == null ? "" : newValue[k]
              if (k[0] === "-") {
                  node[key].setProperty(k, oldValue)
              } else {
                  node[key][k] = oldValue
              }
          }
      } else if (typeof newValue === "function") {
          if (
              !((node.actions || (node.actions = {}))[key] = mapf ? mapf(newValue) : newValue)
          ) {
              node.removeEventListener(key, listener)
          } else if (!oldValue) {
              node.addEventListener(key, listener)
          }
      } else if (!isSvg && key !== "list" && key in node) {
          node[key] = newValue
      } else if (newValue == null || newValue === false || (key === "class" && !newValue)) {
          node.removeAttribute(key)
      } else {
          node.setAttribute(key, newValue)
      }
  }

  const createNode = (vnode, listener, isSvg, mapf) => {
      const node =
          vnode.type === TEXT_NODE
              ? document.createTextNode(vnode.tag)
              : (isSvg = isSvg || vnode.tag === "svg")
                  ? document.createElementNS("http://www.w3.org/2000/svg", vnode.tag)
                  : document.createElement(vnode.tag)
      const props = vnode.props
      mapf = compose(mapf, vnode.mapf);

      for (let k in props) {
          patchProperty(node, k, null, props[k], listener, isSvg, mapf)
      }

      for (let i = 0, len = vnode.children.length; i < len; i++) {
          node.appendChild(
              createNode(
                  getVNode(vnode.children[i])[1],
                  listener,
                  isSvg,
                  mapf
              )
          )
      }

      return (vnode.node = node)
  }

  const getKey = keyednode => keyednode == null ? null : keyednode[0]

  const patch = (parent, node, oldVNode, newVNode, listener, isSvg, mapf) => {
      if (oldVNode === newVNode) {
      } else if (oldVNode != null && oldVNode.type === TEXT_NODE && newVNode.type === TEXT_NODE) {
          if (oldVNode.tag !== newVNode.tag)
              node.nodeValue = newVNode.tag
      } else if (oldVNode == null || oldVNode.tag !== newVNode.tag) {
          const oldNode = node
          node = parent.insertBefore(
              createNode(newVNode, listener, isSvg, mapf), //////////////////////
              node
          )
          if (oldNode) {
              parent.removeChild(oldNode)
          }
      } else {
          const oldVProps = oldVNode.props
          const newVProps = newVNode.props

          const oldVKids = oldVNode.children
          const newVKids = newVNode.children

          let oldHead = 0
          let newHead = 0
          let oldTail = oldVKids.length - 1
          let newTail = newVKids.length - 1

          mapf = compose(mapf, newVNode.mapf)
          isSvg = isSvg || newVNode.tag === "svg"

          for (let i in merge(oldVProps, newVProps)) {
              if (
                  (i === "value" || i === "selected" || i === "checked"
                      ? node[i]
                      : oldVProps[i]) !== newVProps[i]
              ) {
                  patchProperty(node, i, oldVProps[i], newVProps[i], listener, isSvg, mapf)
              }
          }

          if(!node.keyed) {
              for (let i = 0; i <= oldTail && i <= newTail; i++) {
                  const oldVNode = oldVKids[i][1]
                  const newVNode = getVNode(newVKids[i], oldVNode)[1]
                  patch(node, oldVNode.node, oldVNode, newVNode, listener, isSvg, mapf)
              }
              for (let i = oldTail + 1; i <= newTail; i++) {
                  const newVNode = getVNode(newVKids[i], oldVNode)[1]
                  node.appendChild(
                      createNode(newVNode, listener, isSvg, mapf)
                  )
              }
              for (let i = newTail + 1; i <= oldTail; i++) {
                  node.removeChild(oldVKids[i][1].node)
              }

          } else { //  node.keyed == true
              while (newHead <= newTail && oldHead <= oldTail) {
                  const [oldKey, oldVNode] = oldVKids[oldHead]
                  if (oldKey !==  newVKids[newHead][0])
                      break
                  const newKNode = getVNode(newVKids[newHead], oldVNode)  ////////////////////
                  patch(node, oldVNode.node, oldVNode, newKNode[1], listener, isSvg, mapf)
                  newHead++
                  oldHead++
              }

              while (newHead <= newTail && oldHead <= oldTail) {
                  const [oldKey, oldVNode] = oldVKids[oldTail]
                  if (oldKey !== newVKids[newTail][0])
                      break
                  const newKNode = getVNode(newVKids[newTail], oldVNode)  ////////////////////
                  patch(node, oldVNode.node, oldVNode, newKNode[1], listener, isSvg, mapf)
                  newTail--
                  oldTail--
              }

              if (oldHead > oldTail) {
                  while (newHead <= newTail) {
                      const [_, newVNode] = getVNode(newVKids[newHead])
                      node.insertBefore(
                          createNode(newVNode, listener, isSvg, mapf),
                          oldVKids[oldHead][1].node
                      )
                      newHead++
                  }
              } else if (newHead > newTail) {
                  while (oldHead <= oldTail) {
                      node.removeChild(oldVKids[oldHead][1].node)
                      oldHead++
                  }
              } else {
                  const keyed = {}
                  const newKeyed = {}
                  for (let i = oldHead; i <= oldTail; i++) {
                      keyed[oldVKids[i][0]] = oldVKids[i][1]
                  }

                  while (newHead <= newTail) {
                      const [oldKey, oldVKid] = oldVKids[oldHead]
                      const [newKey, newVKid] = getVNode(newVKids[newHead], oldVKid)  /////////////////////////

                      if (newKeyed[oldKey] || newKey === getKey(oldVKids[oldHead + 1])) {
                          oldHead++
                          continue
                      }
                      if (oldKey === newKey) {
                          patch(node, oldVKid.node, oldVKid, newVKid, listener, isSvg, mapf)
                          newKeyed[newKey] = true
                          oldHead++
                      } else {
                          const tmpVKid = keyed[newKey]
                          if (tmpVKid != null) {
                              patch(
                                  node,
                                  node.insertBefore(tmpVKid.node, oldVKid.node),
                                  tmpVKid,
                                  newVKids[newHead],
                                  listener,
                                  isSvg,
                                  mapf
                              )
                              newKeyed[newKey] = true
                          } else {
                              patch(node, oldVKid.node, null, newVKids[newHead], listener, isSvg, mapf)
                          }
                      }
                      newHead++
                  }

                  for (let i in keyed) {
                      if (!newKeyed[i]) {
                          node.removeChild(keyed[i].node)
                      }
                  }
              }
          }
      }

      return (newVNode.node = node)
  }

  const propsChanged = function (a, b) {
      for (let k in a) if (a[k] !== b[k]) return true
      for (let k in b) if (a[k] !== b[k]) return true
  }

  const getVNode = (newVNode, oldVNode) => {
      if (typeof newVNode[1].type === "function") {
          if (!oldVNode || oldVNode.memo == null || propsChanged(oldVNode.memo, newVNode[1].memo)) {
              oldVNode = newVNode.type(newVNode.memo)
              oldVNode.memo = newVNode.memo
          }
          newVNode[1] = oldVNode
      }
      return newVNode
  }


  const patchSubs = (oldSubs, newSubs, dispatch) => {
      const subs = []
      for (let
              i = 0;
          i < oldSubs.length || i < newSubs.length;
          i++
      ) {
          const oldSub = oldSubs[i]
          const newSub = newSubs[i]
          subs.push(
              newSub
                  ? !oldSub || newSub[0] !== oldSub[0] || newSub[1] !== oldSub[1]
                      ? [newSub[0], newSub[1], newSub[0](dispatch)(newSub[1])(), oldSub && oldSub[2]()]
                      : oldSub
                  : oldSub && oldSub[2]()
          )
      }
      return subs
  }

  exports.getAction = target => type => () => target.actions[type]
  exports.patchSubs = oldSubs => newSubs => dispatch => () => patchSubs (oldSubs, newSubs, dispatch)
  exports.patch = parent => node => oldVDom => newVDom => listener => () => patch(parent, node, oldVDom, newVDom, e => listener(e)())
})(PS["Pha.App.Internal"] = PS["Pha.App.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Pha.App.Internal"] = $PS["Pha.App.Internal"] || {};
  var exports = $PS["Pha.App.Internal"];
  var $foreign = $PS["Pha.App.Internal"];
  exports["getAction"] = $foreign.getAction;
  exports["patchSubs"] = $foreign.patchSubs;
  exports["patch"] = $foreign.patch;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNode"] = toNode;
})(PS);
(function(exports) {
  "use strict";

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };                                                   

  exports._parentNode = getEffProp("parentNode");
})(PS["Web.DOM.Node"] = PS["Web.DOM.Node"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.DOM.Node"] = $PS["Web.DOM.Node"] || {};
  var exports = $PS["Web.DOM.Node"];
  var $foreign = $PS["Web.DOM.Node"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var parentNode = (function () {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($4) {
          return $3($foreign["_parentNode"]($4));
      };
  })();
  exports["parentNode"] = parentNode;
})(PS);
(function(exports) {
  "use strict";                                               

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["Web.DOM.ParentNode"] = PS["Web.DOM.ParentNode"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.DOM.ParentNode"] = $PS["Web.DOM.ParentNode"] || {};
  var exports = $PS["Web.DOM.ParentNode"];
  var $foreign = $PS["Web.DOM.ParentNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var querySelector = function (qs) {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $4 = $foreign["_querySelector"](qs);
      return function ($5) {
          return $3($4($5));
      };
  };
  exports["querySelector"] = querySelector;
})(PS);
(function(exports) {
  "use strict";

  exports._currentTarget = function (e) {
    return e.currentTarget;
  };

  exports.type_ = function (e) {
    return e.type;
  };
})(PS["Web.Event.Event"] = PS["Web.Event.Event"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var $foreign = $PS["Web.Event.Event"];
  var Data_Nullable = $PS["Data.Nullable"];
  var currentTarget = function ($8) {
      return Data_Nullable.toMaybe($foreign["_currentTarget"]($8));
  };
  exports["currentTarget"] = currentTarget;
  exports["type_"] = $foreign.type_;
})(PS);
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                      
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  exports["toParentNode"] = toParentNode;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Pha.App"] = $PS["Pha.App"] || {};
  var exports = $PS["Pha.App"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Pha = $PS["Pha"];
  var Pha_App_Internal = $PS["Pha.App.Internal"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_DOM_Node = $PS["Web.DOM.Node"];
  var Web_DOM_ParentNode = $PS["Web.DOM.ParentNode"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var app = function (v) {
      var go = function (state) {
          return function (lock) {
              return function (subs) {
                  return function (node) {
                      return function (vdom) {
                          var getState = Effect_Ref.read(state);
                          var setState = function (newState) {
                              return function __do() {
                                  Effect_Ref.write(newState)(state)();
                                  var subs1 = Effect_Ref.read(subs)();
                                  var subs2 = Pha_App_Internal.patchSubs(subs1)(v.subscriptions(newState))(dispatch)();
                                  Effect_Ref.write(subs2)(subs)();
                                  var lock1 = Effect_Ref.read(lock)();
                                  return Control_Applicative.unless(Effect.applicativeEffect)(lock1)(function __do() {
                                      Effect_Ref.write(true)(lock)();
                                      return render(v.view(newState))();
                                  })();
                              };
                          };
                          var render = function (newVDom) {
                              return function __do() {
                                  Effect_Ref.write(false)(lock)();
                                  var oldVDom = Effect_Ref.read(vdom)();
                                  var node1 = Effect_Ref.read(node)();
                                  var pnode = Web_DOM_Node.parentNode(node1)();
                                  if (pnode instanceof Data_Maybe.Nothing) {
                                      return Data_Unit.unit;
                                  };
                                  if (pnode instanceof Data_Maybe.Just) {
                                      var node2 = Pha_App_Internal.patch(pnode.value0)(node1)(oldVDom)(newVDom)(listener)();
                                      Effect_Ref.write(node2)(node)();
                                      return Effect_Ref.write(newVDom)(vdom)();
                                  };
                                  throw new Error("Failed pattern match at Pha.App (line 49, column 17 - line 54, column 47): " + [ pnode.constructor.name ]);
                              };
                          };
                          var modify = function (fn) {
                              return function __do() {
                                  var $31 = getState();
                                  return setState(fn($31))();
                              };
                          };
                          var listener = function (e) {
                              var v1 = Web_Event_Event.type_(e);
                              var v2 = Web_Event_Event.currentTarget(e);
                              if (v2 instanceof Data_Maybe.Nothing) {
                                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                              };
                              if (v2 instanceof Data_Maybe.Just) {
                                  return function __do() {
                                      var fn = Pha_App_Internal.getAction(v2.value0)(v1)();
                                      return dispatchEvent(e)(fn)();
                                  };
                              };
                              throw new Error("Failed pattern match at Pha.App (line 88, column 13 - line 92, column 39): " + [ v2.constructor.name ]);
                          };
                          var dispatchEvent = function (ev) {
                              return function (handler) {
                                  return function __do() {
                                      var msg = handler(ev)();
                                      if (msg instanceof Data_Maybe.Nothing) {
                                          return Data_Unit.unit;
                                      };
                                      if (msg instanceof Data_Maybe.Just) {
                                          return dispatch(msg.value0)();
                                      };
                                      throw new Error("Failed pattern match at Pha.App (line 82, column 25 - line 84, column 48): " + [ msg.constructor.name ]);
                                  };
                              };
                          };
                          var dispatch = v.update({
                              get: getState,
                              modify: function (f) {
                                  return modify(f);
                              }
                          });
                          return function __do() {
                              setState(v.init.state)();
                              if (v.init.action instanceof Data_Maybe.Just) {
                                  return dispatch(v.init.action.value0)();
                              };
                              if (v.init.action instanceof Data_Maybe.Nothing) {
                                  return Data_Unit.unit;
                              };
                              throw new Error("Failed pattern match at Pha.App (line 39, column 9 - line 41, column 32): " + [ v.init.action.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
      return function __do() {
          var parentNode = Data_Functor.mapFlipped(Effect.functorEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))(Web_HTML_HTMLDocument.toParentNode)();
          var selected = Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Maybe.functorMaybe)(Web_DOM_Element.toNode))(Web_DOM_ParentNode.querySelector(v.selector)(parentNode))();
          if (selected instanceof Data_Maybe.Nothing) {
              return Data_Unit.unit;
          };
          if (selected instanceof Data_Maybe.Just) {
              var state = Effect_Ref["new"](v.init.state)();
              var lock = Effect_Ref["new"](false)();
              var subs = Effect_Ref["new"]([  ])();
              var node = Effect_Ref["new"](selected.value0)();
              var vdom = Effect_Ref["new"](Pha.text(""))();
              return go(state)(lock)(subs)(node)(vdom)();
          };
          throw new Error("Failed pattern match at Pha.App (line 27, column 5 - line 35, column 41): " + [ selected.constructor.name ]);
      };
  };
  exports["app"] = app;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Pha.Elements"] = $PS["Pha.Elements"] || {};
  var exports = $PS["Pha.Elements"];
  var Pha = $PS["Pha"];        
  var div = Pha.h("div");
  var button = Pha.h("button");
  exports["button"] = button;
  exports["div"] = div;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Pha.Events"] = $PS["Pha.Events"] || {};
  var exports = $PS["Pha.Events"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Pha = $PS["Pha"];
  var on = Pha.unsafeOnWithEffect;
  var always = function (msg) {
      return function (v) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(msg));
      };
  };
  var onclick = (function () {
      var $44 = on("click");
      return function ($45) {
          return $44(always($45));
      };
  })();
  exports["onclick"] = onclick;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Pha.Util"] = $PS["Pha.Util"] || {};
  var exports = $PS["Pha.Util"];
  var Data_Show = $PS["Data.Show"];
  var pc = function (x) {
      return Data_Show.show(Data_Show.showNumber)(x * 100.0) + "%";
  };
  exports["pc"] = pc;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Example.Random"] = $PS["Example.Random"] || {};
  var exports = $PS["Example.Random"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect = $PS["Effect"];
  var Effect_Random = $PS["Effect.Random"];
  var Pha = $PS["Pha"];
  var Pha_App = $PS["Pha.App"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Util = $PS["Pha.Util"];                
  var RollDice = (function () {
      function RollDice() {

      };
      RollDice.value = new RollDice();
      return RollDice;
  })();
  var DrawCard = (function () {
      function DrawCard() {

      };
      DrawCard.value = new DrawCard();
      return DrawCard;
  })();
  var ShufflePuzzle = (function () {
      function ShufflePuzzle() {

      };
      ShufflePuzzle.value = new ShufflePuzzle();
      return ShufflePuzzle;
  })();
  var Ace = (function () {
      function Ace() {

      };
      Ace.value = new Ace();
      return Ace;
  })();
  var Two = (function () {
      function Two() {

      };
      Two.value = new Two();
      return Two;
  })();
  var Three = (function () {
      function Three() {

      };
      Three.value = new Three();
      return Three;
  })();
  var Four = (function () {
      function Four() {

      };
      Four.value = new Four();
      return Four;
  })();
  var Five = (function () {
      function Five() {

      };
      Five.value = new Five();
      return Five;
  })();
  var Six = (function () {
      function Six() {

      };
      Six.value = new Six();
      return Six;
  })();
  var Seven = (function () {
      function Seven() {

      };
      Seven.value = new Seven();
      return Seven;
  })();
  var Eight = (function () {
      function Eight() {

      };
      Eight.value = new Eight();
      return Eight;
  })();
  var Nine = (function () {
      function Nine() {

      };
      Nine.value = new Nine();
      return Nine;
  })();
  var Ten = (function () {
      function Ten() {

      };
      Ten.value = new Ten();
      return Ten;
  })();
  var Jack = (function () {
      function Jack() {

      };
      Jack.value = new Jack();
      return Jack;
  })();
  var Queen = (function () {
      function Queen() {

      };
      Queen.value = new Queen();
      return Queen;
  })();
  var King = (function () {
      function King() {

      };
      King.value = new King();
      return King;
  })();
  var viewCard = function (v) {
      if (v instanceof Ace) {
          return "\ud83c\udca1";
      };
      if (v instanceof Two) {
          return "\ud83c\udca2";
      };
      if (v instanceof Three) {
          return "\ud83c\udca3";
      };
      if (v instanceof Four) {
          return "\ud83c\udca4";
      };
      if (v instanceof Five) {
          return "\ud83c\udca5";
      };
      if (v instanceof Six) {
          return "\ud83c\udca6";
      };
      if (v instanceof Seven) {
          return "\ud83c\udca7";
      };
      if (v instanceof Eight) {
          return "\ud83c\udca8";
      };
      if (v instanceof Nine) {
          return "\ud83c\udca9";
      };
      if (v instanceof Ten) {
          return "\ud83c\udcaa";
      };
      if (v instanceof Jack) {
          return "\ud83c\udcab";
      };
      if (v instanceof Queen) {
          return "\ud83c\udcad";
      };
      if (v instanceof King) {
          return "\ud83c\udcae";
      };
      throw new Error("Failed pattern match at Example.Random (line 57, column 1 - line 57, column 25): " + [ v.constructor.name ]);
  };
  var view = function (v) {
      return Pha_Elements.div([  ])([ Pha_Elements.div([ Pha["class'"]("counter")(true) ])([ Pha.text(Data_Show.show(Data_Show.showInt)(v.dice)) ]), Pha_Elements.button([ Pha_Events.onclick(RollDice.value) ])([ Pha.text("Roll dice") ]), Pha_Elements.div([ Pha.style("font-size")("12em") ])([ Pha.text(viewCard(v.card)) ]), Pha_Elements.button([ Pha_Events.onclick(DrawCard.value) ])([ Pha.text("Draw") ]), Pha.keyed("div")([ Pha.class_("puzzle") ])(Data_Array.mapWithIndex(function (i) {
          return function (j) {
              return new Data_Tuple.Tuple(Data_Show.show(Data_Show.showInt)(i), Pha_Elements.div([ Pha["class'"]("puzzle-item")(true), Pha.style("left")(Pha_Util.pc(0.25 * Data_Int.toNumber(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(j)(4)))), Pha.style("top")(Pha_Util.pc(0.25 * Data_Int.toNumber(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(j)(4)))) ])([ Pha.text(Data_Show.show(Data_Show.showInt)(i)) ]));
          };
      })(v.puzzle)), Pha_Elements.button([ Pha_Events.onclick(ShufflePuzzle.value) ])([ Pha.text("Shuffle") ]) ]);
  };
  var state = {
      dice: 1,
      puzzle: Data_Array.range(0)(15),
      card: Ace.value
  };
  var shuffle = function (array) {
      return function __do() {
          var rnds = Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Data_Array.mapWithIndex(function (i) {
              return function (value) {
                  return Data_Functor.map(Effect.functorEffect)(function (v) {
                      return {
                          value: value,
                          index: v
                      };
                  })(Effect_Random.randomInt(0)(i));
              };
          })(array))();
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (t) {
              return function (v) {
                  return Data_Maybe.fromMaybe([  ])(Data_Array.insertAt(v.index)(v.value)(t));
              };
          })([  ])(rnds);
      };
  };
  var cards = Data_Array_NonEmpty["cons'"](Ace.value)([ Two.value, Three.value, Four.value, Five.value, Six.value, Seven.value, Eight.value, Nine.value, Ten.value, Jack.value, Queen.value, King.value ]);
  var update = function (v) {
      return function (v1) {
          if (v1 instanceof RollDice) {
              return function __do() {
                  var n = Effect_Random.randomInt(1)(6)();
                  return v.modify(function (v2) {
                      var $20 = {};
                      for (var $21 in v2) {
                          if ({}.hasOwnProperty.call(v2, $21)) {
                              $20[$21] = v2[$21];
                          };
                      };
                      $20.dice = n;
                      return $20;
                  })();
              };
          };
          if (v1 instanceof DrawCard) {
              return function __do() {
                  var n = Effect_Random.randomInt(0)(Data_Array_NonEmpty.length(cards) - 1 | 0)();
                  return v.modify(function (v2) {
                      var $24 = {};
                      for (var $25 in v2) {
                          if ({}.hasOwnProperty.call(v2, $25)) {
                              $24[$25] = v2[$25];
                          };
                      };
                      $24.card = Data_Maybe.fromMaybe(Data_Array_NonEmpty.head(cards))(Data_Array_NonEmpty.index(cards)(n));
                      return $24;
                  })();
              };
          };
          if (v1 instanceof ShufflePuzzle) {
              return function __do() {
                  var p = Data_Functor.mapFlipped(Effect.functorEffect)(v.get)(function (v2) {
                      return v2.puzzle;
                  })();
                  var p2 = shuffle(p)();
                  return v.modify(function (v2) {
                      var $28 = {};
                      for (var $29 in v2) {
                          if ({}.hasOwnProperty.call(v2, $29)) {
                              $28[$29] = v2[$29];
                          };
                      };
                      $28.puzzle = p2;
                      return $28;
                  })();
              };
          };
          throw new Error("Failed pattern match at Example.Random (line 46, column 1 - line 48, column 23): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var main = Pha_App.app({
      init: {
          state: state,
          action: new Data_Maybe.Just(RollDice.value)
      },
      view: view,
      update: update,
      subscriptions: Data_Function["const"]([  ]),
      selector: "#root"
  });
  exports["shuffle"] = shuffle;
  exports["Ace"] = Ace;
  exports["Two"] = Two;
  exports["Three"] = Three;
  exports["Four"] = Four;
  exports["Five"] = Five;
  exports["Six"] = Six;
  exports["Seven"] = Seven;
  exports["Eight"] = Eight;
  exports["Nine"] = Nine;
  exports["Ten"] = Ten;
  exports["Jack"] = Jack;
  exports["Queen"] = Queen;
  exports["King"] = King;
  exports["cards"] = cards;
  exports["RollDice"] = RollDice;
  exports["DrawCard"] = DrawCard;
  exports["ShufflePuzzle"] = ShufflePuzzle;
  exports["state"] = state;
  exports["update"] = update;
  exports["viewCard"] = viewCard;
  exports["view"] = view;
  exports["main"] = main;
})(PS);
PS["Example.Random"].main();